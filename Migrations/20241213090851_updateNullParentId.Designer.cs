// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolProject.Data;

#nullable disable

namespace SchoolProject.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241213090851_updateNullParentId")]
    partial class updateNullParentId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolProject.Data.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("fees")
                        .HasColumnType("int");

                    b.HasKey("ClassID");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SchoolProject.Data.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("ClassID");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SchoolProject.Data.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<int>("ActivityMark")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FinalExam")
                        .HasColumnType("int");

                    b.Property<int>("MidExam")
                        .HasColumnType("int");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolProject.Data.Parent", b =>
                {
                    b.Property<int>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipToStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentID");

                    b.HasIndex("PersonID")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolProject.Data.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RemainingPayment")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClassID")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SchoolProject.Data.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("contactNumber")
                        .HasColumnType("int");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SchoolProject.Data.Schedual", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Scheduals");
                });

            modelBuilder.Entity("SchoolProject.Data.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateTime>("EmploymentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SchoolProject.Data.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassID");

                    b.HasIndex("ParentId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolProject.Data.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<DateTime?>("EmploymentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<string>("SubjectSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolProject.Data.TeacherAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttendanceId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherAttendances");
                });

            modelBuilder.Entity("SchoolProject.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolProject.Data.Class", b =>
                {
                    b.HasOne("SchoolProject.Data.Teacher", "ClassTeacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTeacher");
                });

            modelBuilder.Entity("SchoolProject.Data.Course", b =>
                {
                    b.HasOne("SchoolProject.Data.Class", "CourseClass")
                        .WithMany("courses")
                        .HasForeignKey("ClassID");

                    b.HasOne("SchoolProject.Data.Teacher", "CourseTeacher")
                        .WithMany("course")
                        .HasForeignKey("TeacherId");

                    b.Navigation("CourseClass");

                    b.Navigation("CourseTeacher");
                });

            modelBuilder.Entity("SchoolProject.Data.Grade", b =>
                {
                    b.HasOne("SchoolProject.Data.Course", "GradeCourse")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Data.Student", "GradeStudent")
                        .WithMany("Grade")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeCourse");

                    b.Navigation("GradeStudent");
                });

            modelBuilder.Entity("SchoolProject.Data.Parent", b =>
                {
                    b.HasOne("SchoolProject.Data.Person", "ParentPerson")
                        .WithOne("Parent")
                        .HasForeignKey("SchoolProject.Data.Parent", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPerson");
                });

            modelBuilder.Entity("SchoolProject.Data.Payment", b =>
                {
                    b.HasOne("SchoolProject.Data.Class", "PaymentClass")
                        .WithOne("Payment")
                        .HasForeignKey("SchoolProject.Data.Payment", "ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Data.Student", "PaymentStudent")
                        .WithMany("Payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentClass");

                    b.Navigation("PaymentStudent");
                });

            modelBuilder.Entity("SchoolProject.Data.Schedual", b =>
                {
                    b.HasOne("SchoolProject.Data.Course", "SchedualCourses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Data.Teacher", "SchedualTeachers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedualCourses");

                    b.Navigation("SchedualTeachers");
                });

            modelBuilder.Entity("SchoolProject.Data.Staff", b =>
                {
                    b.HasOne("SchoolProject.Data.Person", "StaffPerson")
                        .WithOne("Staff")
                        .HasForeignKey("SchoolProject.Data.Staff", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffPerson");
                });

            modelBuilder.Entity("SchoolProject.Data.Student", b =>
                {
                    b.HasOne("SchoolProject.Data.Class", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolProject.Data.Parent", "StudentParent")
                        .WithMany("ParentStudent")
                        .HasForeignKey("ParentId");

                    b.HasOne("SchoolProject.Data.Person", "StudentPerson")
                        .WithOne("Student")
                        .HasForeignKey("SchoolProject.Data.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentClass");

                    b.Navigation("StudentParent");

                    b.Navigation("StudentPerson");
                });

            modelBuilder.Entity("SchoolProject.Data.Teacher", b =>
                {
                    b.HasOne("SchoolProject.Data.Person", "TeacherPerson")
                        .WithOne("Teacher")
                        .HasForeignKey("SchoolProject.Data.Teacher", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherPerson");
                });

            modelBuilder.Entity("SchoolProject.Data.TeacherAttendance", b =>
                {
                    b.HasOne("SchoolProject.Data.Teacher", "Teacher")
                        .WithMany("TeacherAttendances")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolProject.Data.User", b =>
                {
                    b.HasOne("SchoolProject.Data.Person", "UserPerson")
                        .WithOne("User")
                        .HasForeignKey("SchoolProject.Data.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPerson");
                });

            modelBuilder.Entity("SchoolProject.Data.Class", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Students");

                    b.Navigation("courses");
                });

            modelBuilder.Entity("SchoolProject.Data.Course", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolProject.Data.Parent", b =>
                {
                    b.Navigation("ParentStudent");
                });

            modelBuilder.Entity("SchoolProject.Data.Person", b =>
                {
                    b.Navigation("Parent");

                    b.Navigation("Staff");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolProject.Data.Student", b =>
                {
                    b.Navigation("Grade");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("SchoolProject.Data.Teacher", b =>
                {
                    b.Navigation("TeacherAttendances");

                    b.Navigation("course");
                });
#pragma warning restore 612, 618
        }
    }
}
